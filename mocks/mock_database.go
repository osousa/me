// Code generated by MockGen. DO NOT EDIT.
// Source: database.go

// Package mockdb is a generated GoMock package.
package mockdb

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// GetById mocks base method.
func (m *MockDatabase) GetById(arg0 interface{}, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetById indicates an expected call of GetById.
func (mr *MockDatabaseMockRecorder) GetById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockDatabase)(nil).GetById), arg0, arg1)
}

// GetByPk mocks base method.
func (m *MockDatabase) GetByPk(a, b interface{}, c string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPk", a, b, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetByPk indicates an expected call of GetByPk.
func (mr *MockDatabaseMockRecorder) GetByPk(a, b, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPk", reflect.TypeOf((*MockDatabase)(nil).GetByPk), a, b, c)
}

// GetList mocks base method.
func (m *MockDatabase) GetList(arg0 interface{}, arg1 *[]interface{}, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetList indicates an expected call of GetList.
func (mr *MockDatabaseMockRecorder) GetList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockDatabase)(nil).GetList), arg0, arg1, arg2)
}

// GetState mocks base method.
func (m *MockDatabase) GetState() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetState indicates an expected call of GetState.
func (mr *MockDatabaseMockRecorder) GetState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockDatabase)(nil).GetState))
}

// InsertRow mocks base method.
func (m *MockDatabase) InsertRow(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRow", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertRow indicates an expected call of InsertRow.
func (mr *MockDatabaseMockRecorder) InsertRow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRow", reflect.TypeOf((*MockDatabase)(nil).InsertRow), arg0)
}

// RawQuery mocks base method.
func (m *MockDatabase) RawQuery(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawQuery", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RawQuery indicates an expected call of RawQuery.
func (mr *MockDatabaseMockRecorder) RawQuery(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawQuery", reflect.TypeOf((*MockDatabase)(nil).RawQuery), arg0)
}

// RawQueryRow mocks base method.
func (m *MockDatabase) RawQueryRow(arg0 string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawQueryRow", arg0)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawQueryRow indicates an expected call of RawQueryRow.
func (mr *MockDatabaseMockRecorder) RawQueryRow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawQueryRow", reflect.TypeOf((*MockDatabase)(nil).RawQueryRow), arg0)
}

// UpdateRow mocks base method.
func (m *MockDatabase) UpdateRow(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRow", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRow indicates an expected call of UpdateRow.
func (mr *MockDatabaseMockRecorder) UpdateRow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRow", reflect.TypeOf((*MockDatabase)(nil).UpdateRow), arg0)
}
